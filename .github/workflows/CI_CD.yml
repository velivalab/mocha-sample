name: CI_CD


on:
  workflow_dispatch:


env:
  GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}
  NODE_VERSION: '14.x'


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Mocha
        run: npm install --global mocha

      - name: Install Chai
        run: npm install --global chai

      - name: Display npm version
        run: npm --version

      - name: Display mocha version
        run: mocha --version

      - name: CI
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test
          
      - name: ServiceNow DevOps Unit Test Results
        uses: ServiceNow/servicenow-devops-test-report@v1.34.2
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build'
          xml-report-filename: report/
        

  runSonar:
    name: Sonar Analysis
    runs-on: ubuntu-latest
    needs: build
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: sonarqube-scanner install
        run: npm install -g sonarqube-scanner
        
      - name: SonarCloud Scan
        run: sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=master
      
      - name: ServiceNow DevOps Sonar Scan Results
        uses: ServiceNow/servicenow-devops-sonar@v1.34.2
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: 'Sonar Analysis'
          context-github: ${{ toJSON(github) }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}


  registerArtifact:
    runs-on: ubuntu-latest
    name: Register Artifact
    needs: runSonar
    steps:
      - name: ServiceNow DevOps Register Artifact
        uses: ServiceNow/servicenow-devops-register-artifact@v1.34.2
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Artifact'
          # List of Artifacts to be registered
          artifacts: '[{"name": "com:release.zip","version": "1.${{ github.run_number }}.0","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'


  registerPackage:
    runs-on: ubuntu-latest
    name: Register Package
    needs: registerArtifact    
    steps:
      - name: ServiceNow DevOps Register Package
        uses: ServiceNow/servicenow-devops-register-package@v1.34.2
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Package'
          artifacts: '[{"name": "com:release.zip","version": "1.${{ github.run_number }}.0","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
          package-name: 'release-all-${{ github.run_number }}.zip'


  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: registerPackage
    steps:
      - name: Set current date as env variable
        shell: bash
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
        
      - name: Set future date as env variable
        shell: bash
        run: echo "FUTURE=$(date +'%Y-%m-%dT%H:%M:%S' -d '1 day')" >> $GITHUB_ENV
      
      - name: ServiceNow DevOps Change Automation
        uses: velivalab/servicenow-devops-change@v2.0
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Deploy'
          change-request: '{"setCloseCode":"true","attributes":{"start_date":"${{ env.NOW }}","end_date":"${{ env.FUTURE }}","assignment_group": {"name": "Change Management"},"assigned_to": {"name":"Change Manager"},"short_description":"Application deployment for samples-dev","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          
